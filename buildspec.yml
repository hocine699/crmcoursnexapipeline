version: 0.2
env:
  secrets-manager:
    DB_USERNAME: "prod/crm/mysql:DB_USERNAME"
    DB_PASSWORD: "prod/crm/mysql:DATABASE_PASSWORD"
  exported-variables:
    - DB_USERNAME
    - DB_PASSWORD
phases:
  install:
    runtime-versions:
      php: 8.2
    commands:
      - apt-get update -y
      - curl -sS https://getcomposer.org/installer | php -- --install-dir=/usr/local/bin --filename=composer
      - apt-get install -y libpq-dev libzip-dev
      - apt-get install -y php-pgsql
      - apt-get install -y php-bcmath
      - apt-get install -y php-ctype
      - apt-get install -y php-fileinfo
      - apt-get install -y php-mbstring
      - apt-get install -y php-mysql
      - apt-get install -y php-tokenizer
      - apt-get install -y php-xml
      - apt-get install -y php-json
      - apt-get install -y php-pear
      - apt-get install -y php-pear php-dev
      - apt-get install -y php-imagick
      - apt-get install -y imagemagick
      - apt-get install -y libmagickwand-dev
      - pecl install imagick
      - curl -sS https://getcomposer.org/installer -o composer-setup.php
      - php composer-setup.php --install-dir=/usr/local/bin --filename=composer
  pre_build:
    commands:
      #- echo "Current repo $(pwd)"
      - mkdir -p storage/framework/sessions
      - mkdir -p storage/framework/views
      - mkdir -p storage/framework/cache
      - mkdir -p storage/logs
      - chmod -R 777 storage
      - chmod -R 777 storage/framework
      - chmod -R 777 storage/framework/cache
      - chmod -R 777 storage/framework/views
      - chmod -R 777 storage/framework/sessions
      - chmod -R 777 resources/lang
      - chmod -R 777 bootstrap/cache
      - chown -R root:root storage
      - ls -l storage
      - ls -l bootstrap/cache
      - export CACHE_DRIVER=file
      - export FILESYSTEM_DRIVER=local
      - export DATABASE_CREDS_JSON=$(aws secretsmanager get-secret-value --secret-id prod/crm/mysql --region eu-central-1 --output json)
      - export DATABASE_HOST=$(echo $DATABASE_CREDS_JSON | jq -r '.SecretString | fromjson | .host')
      - export DATABASE_NAME=$(echo $DATABASE_CREDS_JSON | jq -r '.SecretString | fromjson | .dbname')
      - export DATABASE_USER=$(echo $DATABASE_CREDS_JSON | jq -r '.SecretString | fromjson | .username')
      - export DATABASE_PASSWORD=$(echo $DATABASE_CREDS_JSON | jq -r '.SecretString | fromjson | .password')
      - composer install
      - npm install
      - mv .env.prod .env
      #- echo "Listing project files before build:"
      #- ls -alR
  build:
    on-failure: ABORT
    commands:
      #- whoami
      #- echo "V√©rification de la pr√©sence des fichiers .ebextensions"
      #- ls -la .ebextensions
      # Enable Imagick extension in PHP configuration
      #- echo "extension=imagick.so" | sudo tee -a /etc/php.ini
      - npm run production
      - php artisan key:generate
      - php artisan storage:link
      #- php artisan config:clear
      - php artisan cache:clear
      - php artisan view:clear
      - php artisan config:cache
      - php artisan optimize:clear
      - php artisan migrate --force
  post_build:
    commands:
      #- sudo systemctl restart httpd.service
      - php artisan test
      - echo "Post build üèó"
      - echo "Ensuring postdeploy script is executable..."
      - chmod +x .platform/hooks/postdeploy/postdeploy.sh  # Donne les droits d'ex√©cution au script
      - echo "Build completed on `date` üèó"
artifacts:
  files:
    - '**/*'
    #- '.ebextensions/**/*'
    - '.platform/**/*'
  name: $(date +%Y-%m-%dT%H:%M:%S).zip
proxy:
  upload-artifacts: no
  logs: no